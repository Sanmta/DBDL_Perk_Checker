# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QCompleter


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 900)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(0)
        # sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        # MainWindow.setSizePolicy(sizePolicy)
        # MainWindow.setAutoFillBackground(False)

        # central widget
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # create perk search bars
        for i in range(1, 5): # 4 survivors
            create_survivor_label(self, str(i), 30, 120 + 200*(i-1)) # create a label for each survivor
            create_valid_label(self, str(i), 1050, 120 + 200*(i-1)) # create a valid label for each survivor
            for j in range(1, 5): # 4 perks per survivor
                create_perk_icon(self, str(j), str(i), 225*(j-1) + 200, 200*(i-1) + 40) # create a perk icon for each perk
                create_perk_search_bar(self, str(j), str(i), 225 * j - 25, 200*(i-1) + 20) # create a search bar for each perk

        # create buttons
        btnPaste = create_button(self, 380, 840, 261, 31, "Paste and Search")
        btnReset = create_button(self, 660, 840, 171, 31, "Reset")
       
        # set central widget
        MainWindow.setCentralWidget(self.centralwidget)

        #QtCore.QMetaObject.connectSlotsByName(MainWindow) unsure if this is needed

        # set window title and show
        MainWindow.setWindowTitle("DBDL Perk Checker")
        MainWindow.show()

def create_survivor_label(self, survivor_no, x, y):
    _translate = QtCore.QCoreApplication.translate
    labelSurvivor = QtWidgets.QLabel(parent=self.centralwidget)
    labelSurvivor.setGeometry(QtCore.QRect(x, y, 101, 21))
    font = QtGui.QFont()
    font.setFamily("Roboto")
    font.setPointSize(16)
    labelSurvivor.setFont(font)
    labelSurvivor.setObjectName("lblSurvivor" + survivor_no)
    labelSurvivor.setText(_translate("MainWindow", "Survivor "  + survivor_no + ":"))

def create_valid_label(self, survivor_no, x, y):
    _translate = QtCore.QCoreApplication.translate
    labelValid = QtWidgets.QLabel(parent=self.centralwidget)
    labelValid.setGeometry(QtCore.QRect(x, y, 101, 21))
    font = QtGui.QFont()
    font.setFamily("Roboto")
    font.setPointSize(16)
    labelValid.setFont(font)
    labelValid.setObjectName("lblSurv" + survivor_no + "Valid")
    labelValid.setText(_translate("MainWindow", "Valid!"))
    labelValid.hide()

def create_perk_icon(self, perk_no, survivor_no, x, y):
    perkIcon = QtWidgets.QLabel(parent=self.centralwidget)
    perkIcon.setGeometry(QtCore.QRect(x, y, 150, 150))
    perkIcon.setPixmap(QtGui.QPixmap("assets/DBDL.png"))
    perkIcon.setScaledContents(True)
    perkIcon.setObjectName("lblPerk" + perk_no + "Surv" + survivor_no)                   

def create_perk_search_bar(self, perk_no, survivor_no, x, y):
    perkSearchBar = QtWidgets.QLineEdit(parent=self.centralwidget)
    perkSearchBar.setGeometry(QtCore.QRect(x, y, 151, 22))
    perkSearchBar.setObjectName("linePerk" + perk_no + "Surv" + survivor_no)
    completer = list_of_all_perks()
    completer.setCaseSensitivity(QtCore.Qt.CaseSensitivity.CaseInsensitive)
    perkSearchBar.setCompleter(completer)

    return perkSearchBar

def create_button(self, x, y, width, height, text):
    button = QtWidgets.QPushButton(parent=self.centralwidget)
    button.setGeometry(QtCore.QRect(x, y, width, height))
    font = QtGui.QFont()
    font.setFamily("Roboto")
    font.setPointSize(16)
    button.setFont(font)
    button.setObjectName("btn" + text)
    button.setText(text)
    return button

def list_of_all_perks():
    return QCompleter([
        'Ace in the Hole',
        'Adrenaline',
        'Aftercare',
        'Alert',
        'Any Means Necessary',
        'Appraisal',
        'Autodidact',
        'Babysitter',
        'Background Player',
        'Balanced Landing',
        'Bardic Inspiration',
        'Better Together',
        'Better Than New',
        'Bite the Bullet',
        'Blast Mine',
        'Blood Pact',
        'Blood Rush',
        'Boil Over',
        'Bond',
        'Boon: Circle of Healing',
        'Boon: Dark Theory',
        'Boon: Exponential',
        'Boon: Illumination',
        'Boon: Shadow Step',
        'Borrowed Time',
        'Botany Knowledge',
        'Breakdown',
        'Breakout',
        'Buckle Up',
        'Built to Last',
        'Calm Spirit',
        'Camaraderie',
        'Champion of Light',
        'Chemical Trap',
        'Clairvoyance',
        'Corrective Action',
        'Counterforce',
        'Cut Loose',
        'Dance With Me',
        'Dark Sense',
        'Dead Hard',
        'Deadline',
        'Deception',
        'Decisive Strike',
        'Deja Vu',
        'Deliverance',
        'Desperate Measures',
        'Detective\'s Hunch',
        'Distortion',
        'Diversion',
        'Dramaturgy',
        'Empathic Connection',
        'Empathy',
        'Fast Track',
        'Fixated',
        'Flashbang',
        'Flip-Flop',
        'Fogwise',
        'For the People',
        'Friendly Competition',
        'Head On',
        'Hope',
        'Hyperfocus',
        'Inner Focus',
        'Inner Strength',
        'Invocation: Weaving Spiders',
        'Iron Will',
        'Kindred',
        'Leader',
        'Left Behind',
        'Light-Footed',
        'Lightweight',
        'Lithe',
        'Low Profile',
        'Lucky Break',
        'Lucky Star',
        'Made For This',
        'Mettle of Man',
        'Mirrored Illusion',
        'No Mither',
        'No One Left Behind',
        'Object of Obsession',
        'Off the Record',
        'Open-Handed',
        'Overcome',
        'Overzealous',
        'Parental Guidance',
        'Pharmacy',
        'Plot Twist',
        'Plunderer\'s Instinct',
        'Poised',
        'Potential Energy',
        'Power Struggle',
        'Premonition',
        'Prove Thyself',
        'Quick & Quiet',
        'Quick Gambit',
        'Reactive Healing',
        'Reassurance',
        'Red Herring',
        'Repressed Alliance',
        'Residual Manifest',
        'Resilience',
        'Resurgence',
        'Rookie Spirit',
        'Saboteur',
        'Scavenger',
        'Scene Partner',
        'Second Wind',
        'Self-Care',
        'Self-Preservation',
        'Slippery Meat',
        'Small Game',
        'Smash Hit',
        'Sole Survivor',
        'Solidarity',
        'Soul Guard',
        'Spine Chill',
        'Sprint Burst',
        'Stake Out',
        'Still Sight',
        'Streetwise',
        'Strength in Shadows',
        'Teamwork: Collective Stealth',
        'Teamwork: Power of Two',
        'Technician',
        'Tenacity',
        'This is Not Happening',
        'Troubleshooter',
        'Unbreakable',
        'Up the Ante',
        'Urban Evasion',
        'Vigil',
        'Visionary',
        'Wake Up!',
        'We\'ll Make It',
        'We\'re Gonna Live Forever',
        'Wicked',
        'Windows of Opportunity',
        'Wiretap'
    ])

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
